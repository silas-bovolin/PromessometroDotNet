// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Promessometro.Infraestrutura.Context;

#nullable disable

namespace Promessometro.Infraestrutura.Migrations
{
    [DbContext(typeof(PromessometroContext))]
    partial class PromessometroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Promessometro.Dominio.Fases.Fase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConclusaoPorcentagem")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PromessaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PromessaId");

                    b.ToTable("Fases", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Promessas.Promessa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConclusaoPorcentagem")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detalhes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promessas", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Requerimentos.Requerimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aprovado")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requerimentos", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaCriptografada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Vereadores.Vereador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaminhoiImagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Partido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vereadores", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Votos.Voto", b =>
                {
                    b.Property<Guid>("VereadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequerimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aprovacao")
                        .HasColumnType("bit");

                    b.HasKey("VereadorId", "RequerimentoId");

                    b.HasIndex("RequerimentoId");

                    b.ToTable("Votos", (string)null);
                });

            modelBuilder.Entity("Promessometro.Dominio.Fases.Fase", b =>
                {
                    b.HasOne("Promessometro.Dominio.Promessas.Promessa", "Promessa")
                        .WithMany("Fases")
                        .HasForeignKey("PromessaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promessa");
                });

            modelBuilder.Entity("Promessometro.Dominio.Votos.Voto", b =>
                {
                    b.HasOne("Promessometro.Dominio.Requerimentos.Requerimento", "Requerimento")
                        .WithMany("Votos")
                        .HasForeignKey("RequerimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Promessometro.Dominio.Vereadores.Vereador", "Vereador")
                        .WithMany("Votos")
                        .HasForeignKey("VereadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requerimento");

                    b.Navigation("Vereador");
                });

            modelBuilder.Entity("Promessometro.Dominio.Promessas.Promessa", b =>
                {
                    b.Navigation("Fases");
                });

            modelBuilder.Entity("Promessometro.Dominio.Requerimentos.Requerimento", b =>
                {
                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Promessometro.Dominio.Vereadores.Vereador", b =>
                {
                    b.Navigation("Votos");
                });
#pragma warning restore 612, 618
        }
    }
}
